//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/NC.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NC : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NC()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NC"",
    ""maps"": [
        {
            ""name"": ""Matching"",
            ""id"": ""87101acd-5903-47c3-aea5-efef435b9928"",
            ""actions"": [
                {
                    ""name"": ""draw"",
                    ""type"": ""Button"",
                    ""id"": ""ffc0985b-8680-43df-815f-9d4649a72c30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c7629e2-c551-448f-b968-863838689c68"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Matching
        m_Matching = asset.FindActionMap("Matching", throwIfNotFound: true);
        m_Matching_draw = m_Matching.FindAction("draw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Matching
    private readonly InputActionMap m_Matching;
    private IMatchingActions m_MatchingActionsCallbackInterface;
    private readonly InputAction m_Matching_draw;
    public struct MatchingActions
    {
        private @NC m_Wrapper;
        public MatchingActions(@NC wrapper) { m_Wrapper = wrapper; }
        public InputAction @draw => m_Wrapper.m_Matching_draw;
        public InputActionMap Get() { return m_Wrapper.m_Matching; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MatchingActions set) { return set.Get(); }
        public void SetCallbacks(IMatchingActions instance)
        {
            if (m_Wrapper.m_MatchingActionsCallbackInterface != null)
            {
                @draw.started -= m_Wrapper.m_MatchingActionsCallbackInterface.OnDraw;
                @draw.performed -= m_Wrapper.m_MatchingActionsCallbackInterface.OnDraw;
                @draw.canceled -= m_Wrapper.m_MatchingActionsCallbackInterface.OnDraw;
            }
            m_Wrapper.m_MatchingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @draw.started += instance.OnDraw;
                @draw.performed += instance.OnDraw;
                @draw.canceled += instance.OnDraw;
            }
        }
    }
    public MatchingActions @Matching => new MatchingActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IMatchingActions
    {
        void OnDraw(InputAction.CallbackContext context);
    }
}
